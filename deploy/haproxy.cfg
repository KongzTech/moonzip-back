global
    daemon
    log stdout format raw local0
    lua-load /usr/local/etc/haproxy/app.haproxy.lua

defaults
    log global
    mode http
    timeout connect 5s
    timeout client  20s
    timeout server  20s

frontend http-in
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/site.pem
    stick-table  type binary  len 20  size 100k  expire 60s  store http_req_rate(60s)

    # Track client by base32+src (Host header + URL path + src IP)
    http-request track-sc0 base32+src

    # Check map file to get rate limit for path
    http-request set-var(req.rate_limit)  path,map_beg(/etc/haproxy/rates.map,20)

    # Client's request rate is tracked
    http-request set-var(req.request_rate)  base32+src,table_http_req_rate()

    # Subtract the current request rate from the limit
    # If less than zero, set rate_abuse to true
    acl rate_abuse var(req.rate_limit),sub(req.request_rate) lt 0
    # Deny if rate abuse
    use_backend rate_limit if rate_abuse

    acl is_preflight method OPTIONS
    use_backend preflight if is_preflight

    default_backend servers

backend servers
    mode http
    option forwardfor

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    http-response lua.add_cors
    server server1 app:8000

backend preflight
    mode http
    http-request use-service lua.ok_response
    http-response lua.add_cors

backend rate_limit
    mode http
    http-request use-service lua.rate_limit
    http-response lua.add_cors
