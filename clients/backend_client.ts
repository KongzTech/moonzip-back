/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/project/buy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["buy"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/project/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["create_project"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/project/get": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_project"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/project/sell": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["sell"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    BuyRequest: {
      /** Format: int64 */
      maxSolCost?: number | null;
      /** Format: uuid */
      projectId: string;
      /** Format: int64 */
      tokens: number;
      user: string;
    };
    BuyResponse: {
      transaction: string;
    };
    CreateProjectForm: {
      /** Format: binary */
      imageContent: string;
      request: components["schemas"]["CreateProjectRequest"];
    };
    CreateProjectRequest: {
      deploySchema: components["schemas"]["DeploySchema"];
      meta: components["schemas"]["CreateTokenMeta"];
      owner: string;
    };
    CreateProjectResponse: {
      /** Format: uuid */
      projectId: string;
      transaction: string;
    };
    CreateTokenMeta: {
      description: string;
      name: string;
      symbol: string;
      telegram?: string | null;
      twitter?: string | null;
      website?: string | null;
    };
    /** @enum {string} */
    CurveVariant: "moonzip" | "pumpfun";
    DeploySchema: {
      curvePool: components["schemas"]["CurveVariant"];
      /** Format: int64 */
      devPurchase?: number | null;
      staticPool?: null | components["schemas"]["StaticPoolSchema"];
    };
    GetProjectRequest: {
      /** Format: uuid */
      projectId: string;
    };
    GetProjectResponse: {
      project?: null | components["schemas"]["PublicProject"];
    };
    PublicProject: {
      createdAt: string;
      curvePoolMint?: string | null;
      description: string;
      /** Format: uuid */
      id: string;
      name: string;
      owner: string;
      stage: components["schemas"]["PublicProjectStage"];
      staticPoolMint?: string | null;
    };
    /** @enum {string} */
    PublicProjectStage:
      | "staticPoolActive"
      | "staticPoolClosed"
      | "curvePoolActive"
      | "curvePoolClosed"
      | "graduated";
    SellRequest: {
      /** Format: int64 */
      minSolOutput?: number | null;
      /** Format: uuid */
      projectId: string;
      /** Format: int64 */
      tokens: number;
      user: string;
    };
    SellResponse: {
      transaction: string;
    };
    SlippageSettings: {
      /** Format: int32 */
      slippageBasisPoints: number;
    };
    StaticPoolSchema: {
      /** Format: int64 */
      launchPeriod: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  buy: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BuyRequest"];
      };
    };
    responses: {
      /** @description Successfully bought tokens from project */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BuyResponse"];
        };
      };
      /** @description Logical error due to user input */
      "4XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error, contact support */
      "5XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  create_project: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateProjectForm"];
      };
    };
    responses: {
      /** @description Successfully created project */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateProjectResponse"];
        };
      };
      /** @description Logical error due to user input */
      "4XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error, contact support */
      "5XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_project: {
    parameters: {
      query: {
        projectId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully fetched project */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetProjectResponse"];
        };
      };
      /** @description Logical error due to user input */
      "4XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error, contact support */
      "5XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  sell: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SellRequest"];
      };
    };
    responses: {
      /** @description Successfully sold tokens to project */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SellResponse"];
        };
      };
      /** @description Logical error due to user input */
      "4XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error, contact support */
      "5XX": {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
